#!/bin/bash

# Pre-commit hook for Developer Intelligence Assistant
# This script runs before each commit to ensure code quality

set -e

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "pyproject.toml" ]; then
    print_error "Not in project root directory"
    exit 1
fi

# Get list of staged Python files
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' | grep -E '^(backend|cli)/' || true)

# Get list of staged JavaScript/TypeScript files
JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' | grep '^frontend/' || true)

# Check Python files
if [ -n "$PYTHON_FILES" ]; then
    echo "üêç Checking Python files..."
    
    # Check if backend virtual environment exists
    if [ ! -d "backend/venv" ]; then
        print_error "Backend virtual environment not found. Run './scripts/start-dev.sh' first."
        exit 1
    fi
    
    cd backend
    source venv/bin/activate
    
    # Run Black formatter check
    echo "  Checking code formatting with Black..."
    if ! black --check $PYTHON_FILES 2>/dev/null; then
        print_error "Code formatting issues found. Run 'black .' to fix."
        deactivate
        cd ..
        exit 1
    fi
    print_status "Black formatting check passed"
    
    # Run isort check
    echo "  Checking import sorting with isort..."
    if ! isort --check-only $PYTHON_FILES 2>/dev/null; then
        print_error "Import sorting issues found. Run 'isort .' to fix."
        deactivate
        cd ..
        exit 1
    fi
    print_status "Import sorting check passed"
    
    # Run flake8 linting
    echo "  Checking code style with flake8..."
    if ! flake8 $PYTHON_FILES 2>/dev/null; then
        print_error "Code style issues found. Check flake8 output above."
        deactivate
        cd ..
        exit 1
    fi
    print_status "Flake8 linting passed"
    
    # Run basic syntax check
    echo "  Checking Python syntax..."
    for file in $PYTHON_FILES; do
        if ! python -m py_compile "$file" 2>/dev/null; then
            print_error "Syntax error in $file"
            deactivate
            cd ..
            exit 1
        fi
    done
    print_status "Python syntax check passed"
    
    deactivate
    cd ..
fi

# Check JavaScript/TypeScript files
if [ -n "$JS_FILES" ]; then
    echo "üì¶ Checking JavaScript/TypeScript files..."
    
    cd frontend
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        print_error "Frontend dependencies not installed. Run 'npm install' first."
        cd ..
        exit 1
    fi
    
    # Run ESLint if configured
    if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "package.json" ]; then
        echo "  Checking code style with ESLint..."
        if npm run lint:check 2>/dev/null; then
            print_status "ESLint check passed"
        else
            print_warning "ESLint check failed or not configured"
        fi
    fi
    
    # Check for TypeScript errors if applicable
    if [ -f "tsconfig.json" ]; then
        echo "  Checking TypeScript..."
        if npx tsc --noEmit 2>/dev/null; then
            print_status "TypeScript check passed"
        else
            print_warning "TypeScript check failed"
        fi
    fi
    
    cd ..
fi

# Check for common issues
echo "üîç Checking for common issues..."

# Check for merge conflict markers
if git diff --cached | grep -E '^[+].*(<{7}|={7}|>{7})' >/dev/null; then
    print_error "Merge conflict markers found in staged files"
    exit 1
fi
print_status "No merge conflict markers found"

# Check for TODO/FIXME comments in staged files
TODO_COUNT=$(git diff --cached | grep -E '^[+].*\b(TODO|FIXME|XXX)\b' | wc -l || echo 0)
if [ "$TODO_COUNT" -gt 0 ]; then
    print_warning "Found $TODO_COUNT new TODO/FIXME comments"
fi

# Check for console.log statements in JavaScript files
if [ -n "$JS_FILES" ]; then
    CONSOLE_COUNT=$(git diff --cached | grep -E '^[+].*console\.(log|debug|info)' | wc -l || echo 0)
    if [ "$CONSOLE_COUNT" -gt 0 ]; then
        print_warning "Found $CONSOLE_COUNT new console.log statements"
    fi
fi

# Check for print statements in Python files
if [ -n "$PYTHON_FILES" ]; then
    PRINT_COUNT=$(git diff --cached | grep -E '^[+].*\bprint\(' | wc -l || echo 0)
    if [ "$PRINT_COUNT" -gt 0 ]; then
        print_warning "Found $PRINT_COUNT new print statements"
    fi
fi

# Check for large files
LARGE_FILES=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(wc -c < "{}") -gt 1048576 ]; then echo "{}"; fi' || true)
if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files detected (>1MB):"
    echo "$LARGE_FILES"
fi

# Check for secrets/credentials
echo "üîê Checking for potential secrets..."
SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "-----BEGIN.*PRIVATE KEY-----"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
    if git diff --cached | grep -iE "$pattern" >/dev/null; then
        print_error "Potential secret found matching pattern: $pattern"
        print_error "Please remove secrets from code and use environment variables"
        exit 1
    fi
done
print_status "No potential secrets found"

# Success message
echo ""
print_status "All pre-commit checks passed! üéâ"
echo ""

exit 0